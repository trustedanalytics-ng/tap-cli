/**
 * Copyright (c) 2016 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Automatically generated by MockGen. DO NOT EDIT!
// Source: vendor/github.com/trustedanalytics/tap-api-service/client/client.go

package api

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/trustedanalytics/tap-api-service/models"
	user_management_connector "github.com/trustedanalytics/tap-api-service/user-management-connector"
	models1 "github.com/trustedanalytics/tap-catalog/models"
	models0 "github.com/trustedanalytics/tap-container-broker/models"
	multipart "mime/multipart"
)

// Mock of TapApiServiceApi interface
type MockTapApiServiceApi struct {
	ctrl     *gomock.Controller
	recorder *_MockTapApiServiceApiRecorder
}

// Recorder for MockTapApiServiceApi (not exported)
type _MockTapApiServiceApiRecorder struct {
	mock *MockTapApiServiceApi
}

func NewMockTapApiServiceApi(ctrl *gomock.Controller) *MockTapApiServiceApi {
	mock := &MockTapApiServiceApi{ctrl: ctrl}
	mock.recorder = &_MockTapApiServiceApiRecorder{mock}
	return mock
}

func (_m *MockTapApiServiceApi) EXPECT() *_MockTapApiServiceApiRecorder {
	return _m.recorder
}

func (_m *MockTapApiServiceApi) GetPlatformInfo() (models.PlatformInfo, error) {
	ret := _m.ctrl.Call(_m, "GetPlatformInfo")
	ret0, _ := ret[0].(models.PlatformInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTapApiServiceApiRecorder) GetPlatformInfo() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetPlatformInfo")
}

func (_m *MockTapApiServiceApi) GetApplicationBindings(applicationId string) (models.InstanceBindings, error) {
	ret := _m.ctrl.Call(_m, "GetApplicationBindings", applicationId)
	ret0, _ := ret[0].(models.InstanceBindings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTapApiServiceApiRecorder) GetApplicationBindings(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetApplicationBindings", arg0)
}

func (_m *MockTapApiServiceApi) GetServiceBindings(serviceId string) (models.InstanceBindings, error) {
	ret := _m.ctrl.Call(_m, "GetServiceBindings", serviceId)
	ret0, _ := ret[0].(models.InstanceBindings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTapApiServiceApiRecorder) GetServiceBindings(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetServiceBindings", arg0)
}

func (_m *MockTapApiServiceApi) BindToApplicationInstance(bindingRequest models.InstanceBindingRequest, applicationId string) (models0.MessageResponse, error) {
	ret := _m.ctrl.Call(_m, "BindToApplicationInstance", bindingRequest, applicationId)
	ret0, _ := ret[0].(models0.MessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTapApiServiceApiRecorder) BindToApplicationInstance(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BindToApplicationInstance", arg0, arg1)
}

func (_m *MockTapApiServiceApi) BindToServiceInstance(bindingRequest models.InstanceBindingRequest, serviceId string) (models0.MessageResponse, error) {
	ret := _m.ctrl.Call(_m, "BindToServiceInstance", bindingRequest, serviceId)
	ret0, _ := ret[0].(models0.MessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTapApiServiceApiRecorder) BindToServiceInstance(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "BindToServiceInstance", arg0, arg1)
}

func (_m *MockTapApiServiceApi) UnbindFromApplicationInstance(bindingRequest models.InstanceBindingRequest, applicationId string) (int, error) {
	ret := _m.ctrl.Call(_m, "UnbindFromApplicationInstance", bindingRequest, applicationId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTapApiServiceApiRecorder) UnbindFromApplicationInstance(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnbindFromApplicationInstance", arg0, arg1)
}

func (_m *MockTapApiServiceApi) UnbindFromServiceInstance(bindingRequest models.InstanceBindingRequest, serviceId string) (int, error) {
	ret := _m.ctrl.Call(_m, "UnbindFromServiceInstance", bindingRequest, serviceId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTapApiServiceApiRecorder) UnbindFromServiceInstance(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UnbindFromServiceInstance", arg0, arg1)
}

func (_m *MockTapApiServiceApi) CreateApplicationInstance(blob multipart.File, manifest models.Manifest) (models1.Application, error) {
	ret := _m.ctrl.Call(_m, "CreateApplicationInstance", blob, manifest)
	ret0, _ := ret[0].(models1.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTapApiServiceApiRecorder) CreateApplicationInstance(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateApplicationInstance", arg0, arg1)
}

func (_m *MockTapApiServiceApi) CreateOffer(serviceWithTemplate models.ServiceDeploy) ([]models1.Service, error) {
	ret := _m.ctrl.Call(_m, "CreateOffer", serviceWithTemplate)
	ret0, _ := ret[0].([]models1.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTapApiServiceApiRecorder) CreateOffer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateOffer", arg0)
}

func (_m *MockTapApiServiceApi) CreateServiceInstance(instance models.Instance) (models0.MessageResponse, error) {
	ret := _m.ctrl.Call(_m, "CreateServiceInstance", instance)
	ret0, _ := ret[0].(models0.MessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTapApiServiceApiRecorder) CreateServiceInstance(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateServiceInstance", arg0)
}

func (_m *MockTapApiServiceApi) DeleteOffering(serviceId string) error {
	ret := _m.ctrl.Call(_m, "DeleteOffering", serviceId)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTapApiServiceApiRecorder) DeleteOffering(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteOffering", arg0)
}

func (_m *MockTapApiServiceApi) DeleteServiceInstance(instanceId string) error {
	ret := _m.ctrl.Call(_m, "DeleteServiceInstance", instanceId)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTapApiServiceApiRecorder) DeleteServiceInstance(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteServiceInstance", arg0)
}

func (_m *MockTapApiServiceApi) DeleteApplicationInstance(instanceId string) error {
	ret := _m.ctrl.Call(_m, "DeleteApplicationInstance", instanceId)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTapApiServiceApiRecorder) DeleteApplicationInstance(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteApplicationInstance", arg0)
}

func (_m *MockTapApiServiceApi) GetOfferings() ([]models.Service, error) {
	ret := _m.ctrl.Call(_m, "GetOfferings")
	ret0, _ := ret[0].([]models.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTapApiServiceApiRecorder) GetOfferings() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetOfferings")
}

func (_m *MockTapApiServiceApi) GetOffering(offeringId string) (models.Service, error) {
	ret := _m.ctrl.Call(_m, "GetOffering", offeringId)
	ret0, _ := ret[0].(models.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTapApiServiceApiRecorder) GetOffering(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetOffering", arg0)
}

func (_m *MockTapApiServiceApi) GetApplicationInstance(applicationId string) (models.ApplicationInstance, error) {
	ret := _m.ctrl.Call(_m, "GetApplicationInstance", applicationId)
	ret0, _ := ret[0].(models.ApplicationInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTapApiServiceApiRecorder) GetApplicationInstance(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetApplicationInstance", arg0)
}

func (_m *MockTapApiServiceApi) GetServiceInstance(serviceId string) (models.ServiceInstance, error) {
	ret := _m.ctrl.Call(_m, "GetServiceInstance", serviceId)
	ret0, _ := ret[0].(models.ServiceInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTapApiServiceApiRecorder) GetServiceInstance(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetServiceInstance", arg0)
}

func (_m *MockTapApiServiceApi) GetApplicationLogs(applicationId string) (map[string]string, error) {
	ret := _m.ctrl.Call(_m, "GetApplicationLogs", applicationId)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTapApiServiceApiRecorder) GetApplicationLogs(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetApplicationLogs", arg0)
}

func (_m *MockTapApiServiceApi) GetServiceLogs(serviceId string) (map[string]string, error) {
	ret := _m.ctrl.Call(_m, "GetServiceLogs", serviceId)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTapApiServiceApiRecorder) GetServiceLogs(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetServiceLogs", arg0)
}

func (_m *MockTapApiServiceApi) GetInstanceCredentials(instanceId string) ([]models0.ContainerCredenials, error) {
	ret := _m.ctrl.Call(_m, "GetInstanceCredentials", instanceId)
	ret0, _ := ret[0].([]models0.ContainerCredenials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTapApiServiceApiRecorder) GetInstanceCredentials(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetInstanceCredentials", arg0)
}

func (_m *MockTapApiServiceApi) ListApplicationInstances() ([]models.ApplicationInstance, error) {
	ret := _m.ctrl.Call(_m, "ListApplicationInstances")
	ret0, _ := ret[0].([]models.ApplicationInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTapApiServiceApiRecorder) ListApplicationInstances() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListApplicationInstances")
}

func (_m *MockTapApiServiceApi) ListServiceInstances() ([]models.ServiceInstance, error) {
	ret := _m.ctrl.Call(_m, "ListServiceInstances")
	ret0, _ := ret[0].([]models.ServiceInstance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTapApiServiceApiRecorder) ListServiceInstances() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListServiceInstances")
}

func (_m *MockTapApiServiceApi) ScaleApplicationInstance(applicationId string, replication int) (models0.MessageResponse, error) {
	ret := _m.ctrl.Call(_m, "ScaleApplicationInstance", applicationId, replication)
	ret0, _ := ret[0].(models0.MessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTapApiServiceApiRecorder) ScaleApplicationInstance(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ScaleApplicationInstance", arg0, arg1)
}

func (_m *MockTapApiServiceApi) ScaleServiceInstance(serviceId string, replication int) (models0.MessageResponse, error) {
	ret := _m.ctrl.Call(_m, "ScaleServiceInstance", serviceId, replication)
	ret0, _ := ret[0].(models0.MessageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTapApiServiceApiRecorder) ScaleServiceInstance(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ScaleServiceInstance", arg0, arg1)
}

func (_m *MockTapApiServiceApi) GetInvitations() ([]string, error) {
	ret := _m.ctrl.Call(_m, "GetInvitations")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTapApiServiceApiRecorder) GetInvitations() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetInvitations")
}

func (_m *MockTapApiServiceApi) SendInvitation(email string) (user_management_connector.InvitationResponse, error) {
	ret := _m.ctrl.Call(_m, "SendInvitation", email)
	ret0, _ := ret[0].(user_management_connector.InvitationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTapApiServiceApiRecorder) SendInvitation(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SendInvitation", arg0)
}

func (_m *MockTapApiServiceApi) ResendInvitation(email string) error {
	ret := _m.ctrl.Call(_m, "ResendInvitation", email)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTapApiServiceApiRecorder) ResendInvitation(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ResendInvitation", arg0)
}

func (_m *MockTapApiServiceApi) DeleteInvitation(email string) error {
	ret := _m.ctrl.Call(_m, "DeleteInvitation", email)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTapApiServiceApiRecorder) DeleteInvitation(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteInvitation", arg0)
}

func (_m *MockTapApiServiceApi) ExposeService(serviceId string, exposed bool) ([]string, int, error) {
	ret := _m.ctrl.Call(_m, "ExposeService", serviceId, exposed)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockTapApiServiceApiRecorder) ExposeService(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ExposeService", arg0, arg1)
}

func (_m *MockTapApiServiceApi) GetUsers() ([]user_management_connector.UaaUser, error) {
	ret := _m.ctrl.Call(_m, "GetUsers")
	ret0, _ := ret[0].([]user_management_connector.UaaUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockTapApiServiceApiRecorder) GetUsers() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetUsers")
}

func (_m *MockTapApiServiceApi) ChangeCurrentUserPassword(password string, newPassword string) error {
	ret := _m.ctrl.Call(_m, "ChangeCurrentUserPassword", password, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTapApiServiceApiRecorder) ChangeCurrentUserPassword(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ChangeCurrentUserPassword", arg0, arg1)
}

func (_m *MockTapApiServiceApi) DeleteUser(email string) error {
	ret := _m.ctrl.Call(_m, "DeleteUser", email)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockTapApiServiceApiRecorder) DeleteUser(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteUser", arg0)
}
